Rewrite notes/how-to/readme.
I want to be able to start this from scratch and get somewhere.

Implement an interrupt module.
    This will allow us to read a button press without the need for polling.

Implement a timer module.
    This will allow us to blink the LED.

Read documentation about the reset line.

Remove old LedHw interface. It is no longer needed.
Remove dead tests and files:
    Led2.h -> Led_ATtiny861.c -> ATtiny861.h
Convert other modules to use a similar path.

Try to support tests during cross-compilation.
    Will run into the bug that the chip is too small!

Do you need to specify the toolchain file first on the command line?

Consider setting CPPUTEST_HOME as an environment variable rather than a preprocessor (-D) option.

Holy crap! Check out the 'make help' target for CppUTest. I have much to learn.

Create a second executable/new product that toggles multiple LEDs.

Add Config.h file per project?

Where should led/gpio mapping be defined? In Led.h or LedMapping.h?
Similarly for GPIO.
Led.h should have no hardware references.

Move compiler flags out of toolchain file?

Perhaps I should pull out the specific wiring details into a separate header file.
Can we use macros?

Add an LED toggle function. Doesn't the hardware specifically support this?

Replace set_gpio_state() with a function pointer.
This will allow us to set the PORT register on a production build and the PORT and PIN registers on a local/test build.

Can we remove ATTN861_GPIO_MAX?

I think stddef.h in the mock hw is defining NULL... or something?


Remove initial state from ButtonObserver. It is unneeded in the foreseeable future.

Are buttons high by default? Design the hardware to ensure that this is the case.

Later on we'll need to verify that a single GPIO is not used twice!!

Flash something to the ATtiny!
Create a Makefile target that will do this.

How to run tests all at once?

Expand tests is HW library - test all GPIO.

How/if/when to check for calloc fail?

Why doesn't the Makefile throw an error if I forget to return a value?
    This is when a C++ function is calling C code.

Look into RESET pin and Brown Out Detection.

Run cross-compiled unit tests in QEMU (can we run them on the chip itself?).

See if I can use include-what-you-use:
    <lang>_INCLUDE_WHAT_YOU_USE
        Runs the respective tool along the with compiler.
        Diagnostics are visible in your IDE.
        Diagnostics are visible on CDash.
    LINK_WHAT_YOU_USE
        links with -Wl,--no-as-needed, then runs ldd -r -u
    <lang> is either C or CXX.
    Each of those properties is initialzied with CMAKE_<property
