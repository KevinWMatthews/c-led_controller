Design a libhw_attiny861 module that grants access to the two hardware timers.
For simplicity, start with only one timer.

The timer will trigger an interrupt. We need to put behavior in this interrupt.
We can either:
    Can we define the interrupt in our module? Perhaps so....
    Allow the user to register a callback and tell them to define the interrupt and place our callback code there.
    Tell the user to do put their code in the interrupt.

Change match_value to match_value_A?

Create:
    Do not allow multiple creates without a destroy.
    ? Disable timer
    Set:
        8-bit mode
        CTC/compare mode
        No input capture mode
        Enable Compare Match A/B interrupts
        Set Compare A/B value(s)

Register callback:
    This allows the user to execute periodic behavior.
    Define the ISR in the Timer module.
    Multiple callbacks?
        As needed.
    Do not allow multiple callbacks to be registered (right now).
    NULL should clear the callback and allow a different one to be registered.

Unregister callback:
    As needed.

Start:
    Clear Timer0 prescaler?
    Start timer - set clock source.
    Do not set global interrupts!
        The user needs control of that; it should happen just before the main loop.
    Do not allow start unless timer has been Created.
    Reset prescaler and counter register?
    The counter register should be fine.
    The prescaler applies to both timers, doesn't it? Sounds dangerous.

Stop:
    Stop timer - set clock source.

Change interval:
    As needed.
    What if we need to change the clock interval/match value at runtime?
    This gets complicated with the prescaler.
    We could hold it in reset using Timer0 Synchronization Mode - TSM bit of TCCR0B register.
    Then reset the Timer0 prescaler?

Destroy:
    Must stop the timer if needed.
    Free any handles.
    Do not allow start.

Check and see if CTC mode checks both Output Compare Registers A and B.
