AVR used to provide sbi() and cbi() macros but deprecated them. See avr/include/compat/deprecated.h.
Instead, they recommend re-implementing them using the AVR's _BV() (byte value) macro.

From http://www.microchip.com/webdoc/AVRLibcReferenceManual/group__avr__sfr.html:
    "Porting programs that use the deprecated sbi/cbi macros
        Access to the AVR single bit set and clear instructions are provided via the standard C bit manipulation commands.
        The sbi and cbi macros are no longer directly supported.
            sbi (sfr,bit) can be replaced by sfr |= _BV(bit) .
                i.e.: sbi(PORTB, PB1); is now PORTB |= _BV(PB1);
            cbi (sfr,bit) is now sfr &= ~(_BV(bit));
    This actually is more flexible than having sbi directly, as the optimizer will use a hardware sbi if appropriate,
    or a read/or/write operation if not appropriate.
    You do not need to keep track of which registers sbi/cbi will operate on."

AVR provides additional macros that could be useful:
    bit_is_set
    bit_is_clear
    loop_until_bit_is_set
    loop_until_bit_is_clear

_delay_ms() requires a constant that is known at compile time;
avr-gcc optimizes away the floating point calculations during compilation.
Encapsulating this function in a library requires passing the sleep value as a variable,
which is not viable in this case.
