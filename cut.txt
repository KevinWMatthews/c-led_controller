

add_library(LedControllerTestLib2
    "${PROJECT_SOURCE_DIR}/src_hw/Led_ATtiny861.c"
    "${PROJECT_SOURCE_DIR}/hw_attiny861/mocks/include"
)
target_include_directories(LedControllerTestLib2 PUBLIC "${PROJECT_SOURCE_DIR}/include")
target_include_directories(LedControllerTestLib2 PRIVATE "${PROJECT_SOURCE_DIR}/hw_attiny861/include")
target_compile_options(LedControllerTestLib2 PRIVATE -include "${CPPUTEST_HOME}/include/CppUTest/MemoryLeakDetectorMallocMacros.h")
target_link_libraries(LedControllerTestLib2 libCppUTest ATtiny861TestLib)

add_executable(Test_Led2
    RunAllTests.cpp
    Test_Led2.cpp
)
target_include_directories(Test_Led2 PRIVATE "${PROJECT_SOURCE_DIR}/include")
target_compile_options(Test_Led2 PRIVATE -include "${CPPUTEST_HOME}/include/CppUTest/MemoryLeakDetectorNewMacros.h")
target_link_libraries(Test_Led2 libCppUTest libCppUTestExt LedControllerTestLib2)
install (TARGETS Test_Led2 DESTINATION bin)


###################################################################
# Create test executable for hardware-independent production code #
###################################################################
# I am not sure if we would rather compile all LedController tests
# into a single executable or if we would rather have separate
# executables for each module.
# At the moment I will use a monolithic executable for hardware-independent
# production code and run tests for a specific module using CppUTest flags:
#   -g <group>      contains group
#   -sg <group>     matches group exactly
#   -lg             print all group names
add_executable(Test_LedController
    RunAllTests.cpp
    Test_LedController.cpp
    Test_ButtonObserver.cpp
    Test_Led.cpp
    Test_Button.cpp
    "${PROJECT_SOURCE_DIR}/mocks/Mock_LedHw.c"
    "${PROJECT_SOURCE_DIR}/mocks/Mock_ButtonHw.c"
)
target_include_directories(Test_LedController PRIVATE "${PROJECT_SOURCE_DIR}/include_hw")
target_include_directories(Test_LedController PRIVATE "${PROJECT_SOURCE_DIR}/mocks")
target_compile_options(Test_LedController PRIVATE -include "${CPPUTEST_HOME}/include/CppUTest/MemoryLeakDetectorNewMacros.h")
target_link_libraries(Test_LedController libCppUTest libCppUTestExt LedControllerTestLib)
install (TARGETS Test_LedController DESTINATION bin)

#######################################################
# Create test executable for hardware interface layer #
#######################################################
add_executable(Test_LedHwATtiny861
    RunAllTests.cpp
    Test_LedHwATtiny861.cpp
    "${PROJECT_SOURCE_DIR}/src_hw/LedHw_ATtiny861.c"
    "${PROJECT_SOURCE_DIR}/mocks/Mock_ATtiny861.cpp"
)
target_include_directories(Test_LedHwATtiny861 PRIVATE "${PROJECT_SOURCE_DIR}/include_hw")
target_include_directories(Test_LedHwATtiny861 PRIVATE "${PROJECT_SOURCE_DIR}/hw_attiny861/include")
target_compile_options(Test_LedHwATtiny861 PRIVATE -include "${CPPUTEST_HOME}/include/CppUTest/MemoryLeakDetectorNewMacros.h")
target_link_libraries(Test_LedHwATtiny861 libCppUTest libCppUTestExt LedControllerTestLib)
