Design a libhw_attiny861 module that grants access to the two hardware timers.
For simplicity, start with only one timer and one interrupt source:
    Timer0, Compare Match A.

- Create():
    # Configure the timer.
    ?   Multiple creates reconfigure the timer.
    ?   Disable timer
    Set:
        -   8-bit mode
        -   CTC/compare mode
        -   No input capture mode
        -   Enable Compare Match A interrupts
        -   Set Compare A value
        x   Enable Compare Match B interrupts
        x   Set Compare B value
        x   Enable overflow interrupts

- Register callback():
    # This allows the user to execute periodic behavior.
    -   Define the ISR in the Timer module.
    -   Multiple callbacks? As needed.
    -   Do not allow multiple callbacks to be registered (right now) - replace existing.
    -   NULL should clear the callback.

- Callback execution:
    -   Execute callback
    -   Do not segfault with NULL callback.

X Mock:
    * This mock may needs tests of its own! *
    Do not execute if timer is stopped.
    Do not execute if MatchA interrupts are not enabled.
    Ignore the flag register.
    Ignore the global interrupt register; assume that global interrupts are enabled.
    ? Increment counter register instead of triggering an interrupt.

X Unregister callback:
    If needed.

- Start():
    ? Clear Timer0 prescaler
    -   Start timer - set clock source.
    -   Do not set global interrupts!
        The user needs control of that; it should happen just before the main loop.
    ? Do not allow start unless timer has been Created.
    X Reset Timer0 counter register
        Technically necessary?
        Hard to test right now because nothing increments our mock timer counter.
        We could just hack it in there....
        Will only affect the first interrupt, which is fine for now.
    ? Reset Timer0 prescaler
        The prescaler applies to both timers, doesn't it? Sounds dangerous.
        Would be most useful if we were starting and stopping the timer.

X Stop:
    Stop timer - set clock source. As needed.

X Change interval:
    As needed.
    What if we need to change the clock interval/match value at runtime?
    This gets complicated with the prescaler.
    We could hold it in reset using Timer0 Synchronization Mode - TSM bit of TCCR0B register.
    Then reset the Timer0 prescaler?

X Destroy:
    As needed; currently nothing for it to do.
    Must stop the timer if needed.
    Free any handles.
    Do not allow start.

X HW:
    Haven't actually tried Compare Match B.
    Check and see if CTC mode checks both Output Compare Registers A and B when in 8-bit mode.
